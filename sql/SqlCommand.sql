-- DDL --
-- SQL SERVER REPLICATION --> Bir yerdeki sunucu ile başka sunucu arası veri transferi/Bir verinin farklı konumlardaki sunucularda tutulması
-- SQL RDBMS -->İlişkisel Veritabanı Yönetim Sistemi
-- MasterDB --> Sistem conf/kullanıcılar ve yetkileri/Sistem Dosyaları/Erişim yetkileri/Temel conf
-- ModelDB --> Şablon veritabanı/Her oluşturulacak veritabanı ModelDB'nin bir kopyası
-- MsDB --> Periyodik olarak çalıştırılam her türlü işlem burada tutulur(joblar,schedulelar,alertler)
-- TempDB --> Geçici tabloların oluşturulduğu işlemler burada gerçekleşir/Aggregation işlemler(by,order by,sum,count,max, min gibi)
-- DDL Commands --> CREATE / ALTER / DROP / TRUNCATE
CREATE DATABASE TEST -- Database oluştur

DROP DATABASE TEST --- Database sil

CREATE TABLE ISIMLER (
	ID INT IDENTITY(1,1),ISIM VARCHAR(20)
) -- Tablo oluştur

INSERT INTO ISIMLER(ISIM)VALUES('MEMET') -- kayıt gir

SELECT*FROM ISIMLER -- tablodaki verilerin hepsini çağır

DROP TABLE ISIMLER -- tabloyu sil

ALTER TABLE ISIMLER ADD TELEFON VARCHAR(12) -- kolon ekleme

ALTER TABLE ISIMLER ADD SOYISIM VARCHAR(12) -- kolon ekleme

ALTER TABLE ISIMLER DROP COLUMN SOYISIM -- kolon sil

ALTER TABLE ISIMLER ALTER COLUMN TELEFON VARCHAR(50) -- varolan bir kolonun içeriğini değiştirme

TRUNCATE TABLE ISIMLER -- tablonun içerisindeki verileri siler

DECLARE @ISIM AS VARCHAR(100) -- değişken tanımlama
SET @ISIM='MEHMET' -- değişkene değer atama
DECLARE @SOYISIM AS VARCHAR(100)='DEMİREL' -- değişken tanımlama ve değişkene değer atama
SELECT @ISIM,@SOYISIM -- görüntüleme


DECLARE 
	@SAYI1 AS INTEGER,
	@SAYI2 AS INTEGER,
	@SAYI3 AS INTEGER

-- OR --

DECLARE @SAYI1 AS INTEGER=10
DECLARE @SAYI2 AS INTEGER
SET @SAYI2='20'
DECLARE @TOPLAM2 AS INTEGER
SET @TOPLAM2=@SAYI1+@SAYI2

SELECT @SAYI1 AS SAYI1,@SAYI2 AS SAYI2,@SAYI1+@SAYI2 AS TOPLAM,@TOPLAM2 AS TOPLAM2 -- alias

-- TABLODAKİ DEĞERLERİ DEĞİŞKENE ATAMA --

DECLARE @ISIM AS VARCHAR(50)
DECLARE @TELEFON AS VARCHAR(50)
SELECT 
@ISIM=NAMESURNAME,@TELEFON=TELNR FROM CUSTOMERS WHERE ID=2
SELECT @ISIM,@TELEFON


-- DATE TIME --
DECLARE @DATE AS DATETIME
SET @DATE=GETDATE()
SELECT @DATE TARIH

-- String functions --

-- SUBSTRING --

DECLARE @KELIME AS VARCHAR(50)
SET @KELIME='MERHABA DÜNYA'
SELECT SUBSTRING(@KELIME,1,7) -- BELİRLENMİŞ İNDEKSLER ARASI CHARLARI AYIRIR
SELECT SUBSTRING(@KELIME,9,13)

-- LOWER, UPPER --
DECLARE @KELIME AS VARCHAR(50)
SET @KELIME='MERHABA DÜNYA'
SELECT LOWER(@KELIME) -- KELİMELERİN HEPSİNİ BÜYÜK HARF YAPAR
SELECT UPPER(@KELIME) -- KELİMELERİN HEPSİNİ KÜÇÜK HARF YAPAR

-- String birleştirme --
DECLARE @AD AS VARCHAR(50)='MEHMET'
DECLARE @SOYAD AS VARCHAR(50)='DEMİREL'
SELECT @AD+' '+@SOYAD

-- RIGHT, LEFT --
DECLARE @KELIME AS VARCHAR(50)
SET @KELIME='MERHABA DÜNYA'
--SELECT LEFT(@KELIME,7) -- SOLDAN İTİBAREN 7 KARAKTER
SELECT RIGHT(@KELIME,5) -- SAĞDAN İTİBAREN 5 KARAKTER

-- LTRIM,RTRIM,TRIM --
DECLARE @KELIME AS VARCHAR(100)='   MERHABA DÜNYA   '
SELECT LTRIM(@KELIME) -- SOL KISIMDAKI BOŞLUKLARI SİLER
SELECT RTRIM(@KELIME) -- SAĞ KISIMDAKİ BOŞLUKLARI SİLER
SELECT TRIM(@KELIME) -- SAĞ VE SOLDAKİ BOŞLUKLARI SİLER
SELECT LTRIM(RTRIM(@KELIME)) -- TRIM İLE AYNI

-- REPLACE --
DECLARE @KELIME AS VARCHAR(100)='MERHABA DÜNYA'
SELECT REPLACE(@KELIME,'Ü','U') -- HARF DEĞİŞİMİ
REPLACE(@KELIME,'MERHABA','HELLO') -- KELIME DEĞİŞİMİ
SELECT REPLACE(REPLACE(@KELIME,'MERHABA','HELLO'),'DÜNYA','WORLD')

-- LEN --
DECLARE @KELIME AS VARCHAR(100)='MERHABA DÜNYA'
SELECT LEN(@KELIME) -- CÜMLE VEYA KELIME UZUNLUGU

-- STRING_SPLIT --
DECLARE @KELIME AS VARCHAR(100)='MERHABA DÜNYA'
SELECT
* FROM string_split(@KELIME,' ') -- KELIMELERI TABLO DEĞERİNE DÖNÜŞTÜRÜR
DECLARE @KELIME AS VARCHAR(100)='MERHABA BEN MEHMET SQL EĞİTİMİ ALIYORUM'
SELECT
* FROM string_split(@KELIME,' ')

-- DATE TIME FUNCTİONS --

-- DATEADD --
DECLARE @TARIH AS DATETIME
	SET @TARIH='2021-01-01 16:21:37' 
DECLARE @TARIH2 AS DATETIME
	SET @TARIH2=DATEADD(MONTH,6,@TARIH) -- GÜN AY YIL GİBİ EKLEMELER
SELECT @TARIH,@TARIH2

-- DATEDIFF --
DECLARE @TARIH AS DATETIME
	SET @TARIH='2018-01-01 18:18:12' -- İKİ TARİH ARASI FARK GÜN AY YIL
DECLARE @TARIH2 AS DATETIME
	SET @TARIH2='2021-01-01 21:21:21'
SELECT DATEDIFF(YEAR,@TARIH,@TARIH2) AS YIL
SELECT DATEDIFF(DAY,@TARIH,@TARIH2) AS GUN
SELECT DATEDIFF(WEEK,@TARIH,@TARIH2) AS HAFTA
SELECT DATEDIFF(MONTH,@TARIH,@TARIH2) AS AY

-- DATEFROMPARTS --
SELECT DATEFROMPARTS(2021,8,21)
DECLARE @TARIH AS DATETIME -- TARIH FORMATINA DÖNÜŞTÜRME
SET @TARIH=DATEFROMPARTS(2021,8,21)
SELECT @TARIH

-- DATEPART --
DECLARE @TARIH AS DATETIME
	SET @TARIH='2018-01-01 18:18:12' -- TARIHTEN ISTEDIGIMIZ ALANI GETIRTME
SELECT DATEPART(YEAR,@TARIH)

-- GETDATE --
SELECT GETDATE() -- ŞU ANKİ ZAMANI GETİRİR
DECLARE @TARIH AS DATE -- YAŞ HESAPLAMA
	SET @TARIH='1996-10-08'
SELECT DATEDIFF(YEAR,@TARIH,GETDATE())

-- WHILE --
DECLARE @I AS INT = 0
WHILE @I<10
BEGIN
INSERT INTO TARIHLER (TARIH) VALUES(GETDATE())
WAITFOR DELAY '00:00:01'
PRINT @I
SET @I=@I+1
END
SELECT * FROM TARIHLER
----------------------------------------------
SELECT * FROM ISIM
SELECT * FROM SOYISIM
SELECT * FROM KISILER
DECLARE @AD AS VARCHAR(50)
DECLARE @SOYAD AS VARCHAR(50)
DECLARE @I AS INT=0

WHILE @I<1
	BEGIN
SELECT @AD=AD FROM ISIM WHERE ID=ROUND (RAND()*1000,0)
SELECT @SOYAD=SOYAD FROM SOYISIM WHERE ID=ROUND (RAND()*1000,0)
SELECT @AD,@SOYAD
INSERT INTO KISILER(AD,SOYAD) VALUES (@AD,@SOYAD)
SET @I=@I+1
	END
-- STRING --
CHAR(N)
NCHAR
VARCHAR(N,MAX)
NVARCHAR(N,max)
TEXT
NTEXT
-- NUMBER --
INT
BIT
BIGINT
SMALLINT
TINYINT
DECIMAL OR NUMERIC
FLOAT(N)
MONEY
REAL
SMALLMONEY
BIT(BOOLEAN)

BINARY(N)
VARBINARY(N)
IMAGE
-- DATE --
DATE
SMALLDATETIME
DATETIME
DATETIME2
TIME
DATETIMEOFFSET

----------------------------------------------------------------------------------------------------------------------------------------

DECLARE 
	@I AS INT=1,
	@NAMES AS VARCHAR(50),
	@IDS AS INT=1
WHILE(@I<=1)
	BEGIN
	SELECT @NAMES=NAMESURNAME FROM CUSTOMERS WHERE(@IDS=ID)
	SELECT @NAMES AS ISIMLER
	SET @IDS+=1
	SET @I+=1A
	END

INSERT INTO CUSTOMERS([NAMESURNAME], [GENDER], [BIRTHDATE], [CITY], [TOWN], [TELNR], [NAME_], [SURNAME])
VALUES('MEHMET DEMİREL','E','1999-08-10','OSMANIYE','KADIRLI','1111111111','MEHMET','DEMİREL')
SELECT * FROM CUSTOMERS WHERE(ID='2512013')

UPDATE CUSTOMERS
	SET 
	NAMESURNAME='AHMET DEMİREL',
	GENDER='E', 
	BIRTHDATE='1999-08-10',
	CITY='OSMANIYE',
	TOWN='KADIRLI',
	TELNR='111111111',
	NAME_='AHMET',
	SURNAME='DEMİREL'
WHERE(ID='2512013')

UPDATE CUSTOMERS
	SET AGE=DATEDIFF(YEAR,BIRTHDATE,GETDATE())

DECLARE @S1 AS FLOAT=29
DECLARE @S2 AS FLOAT=7
DECLARE @TOPLA AS CHAR(1)='+'
DECLARE @CIKAR AS CHAR(1)='-'
DECLARE @BOL AS CHAR(1)='/'


----------------------------------------------------------------------------------------------------------------------------------------

SELECT * FROM CUSTOMERS
SELECT * FROM CUSTOMERS WHERE(CITY='İZMİR')
SELECT * FROM CUSTOMERS WHERE(CITY<>'İZMİR')
SELECT * FROM CUSTOMERS WHERE(NOT CITY='İZMİR')
SELECT * FROM CUSTOMERS WHERE(GENDER='E')
SELECT * FROM CUSTOMERS WHERE(BIRTHDATE>'1990-01-01')
SELECT * FROM CUSTOMERS WHERE(BIRTHDATE BETWEEN '1990-01-01' AND '1992-01-01')
SELECT * FROM CUSTOMERS WHERE(AGE BETWEEN 20 AND 30)
SELECT *FROM CUSTOMERS WHERE(BIRTHDATE='1998-01-02')
SELECT * FROM CUSTOMERS WHERE(NAMESURNAME LIKE 'ALİ%')
SELECT * FROM CUSTOMERS WHERE(NAMESURNAME LIKE '%ALİ')
SELECT * FROM CUSTOMERS WHERE(NAMESURNAME LIKE '%ALİ%')
SELECT * FROM CUSTOMERS WHERE(CITY IN('İSTANBUL','ANKARA'))
SELECT * FROM CUSTOMERS WHERE(CITY NOT IN('İSTANBUL','ANKARA'))

----------------------------------------------------------------------------------------------------------------------------------------
UPDATE CUSTOMERS 
	SET BIRTHDATE='1998-01-02'
	WHERE(BIRTHDATE BETWEEN '1990-01-01' AND '1992-01-01')

UPDATE CUSTOMERS
	SET GENDER='ERKEK'
	WHERE(GENDER='E')

UPDATE CUSTOMERS
	SET GENDER='KADIN'
	WHERE(GENDER='K')

SELECT TOP(100) * FROM CUSTOMERS
UPDATE CUSTOMERS
	SET GENDER='E'
	WHERE(GENDER='ERKEK')

UPDATE CUSTOMERS
	SET GENDER='K'
	WHERE(GENDER='KADIN')

----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE MEMET(
	ID  INT IDENTITY(1,1) NOT NULL,
	NAMESURNAME VARCHAR(50),
	AGE INT
)
----------------------------------------------------------------------------------------------------------------------------------------
SELECT * FROM CUSTOMERS ORDER BY(NAMESURNAME)ASC
SELECT * FROM CUSTOMERS ORDER BY(NAMESURNAME)DESC
SELECT * FROM CUSTOMERS WHERE(CITY='İSTANBUL') ORDER BY(NAMESURNAME)

----------------------------------------------------------------------------------------------------------------------------------------

SELECT 
	MIN(AMOUNT) AS MIN_AMOUNT,
	MAX(AMOUNT) AS MAX_AMOUNT,
	COUNT(AMOUNT) AS COUNT_AMOUNT,
	SUM(AMOUNT) AS SUM_AMOUNT,
	AVG(AMOUNT) AS AVG_AMOUNT 
FROM SALES

SELECT 
	MIN(TOTALPRICE) AS MIN_TOTALPRICE,
	MAX(TOTALPRICE) AS MAX_TOTALPRICE,
	COUNT(TOTALPRICE) AS COUNT_TOTALPRICE,
	SUM(TOTALPRICE) AS SUM_TOTALPRICE,
	AVG(TOTALPRICE) AS AVG_TOTALPRICE 
FROM SALES

SELECT 
	MIN(TOTALPRICE) AS MIN_TOTALPRICE,
	MAX(TOTALPRICE) AS MAX_TOTALPRICE,
	COUNT(TOTALPRICE) AS COUNT_TOTALPRICE,
	SUM(TOTALPRICE) AS SUM_TOTALPRICE,
	AVG(TOTALPRICE) AS AVG_TOTALPRICE 
FROM SALES WHERE (CITY='ADANA')

SELECT 
	MIN(TOTALPRICE) AS MIN_TOTALPRICE,
	MAX(TOTALPRICE) AS MAX_TOTALPRICE,
	COUNT(TOTALPRICE) AS COUNT_TOTALPRICE,
	SUM(TOTALPRICE) AS SUM_TOTALPRICE,
	AVG(TOTALPRICE) AS AVG_TOTALPRICE 
FROM SALES WHERE (CITY='ANKARA')

SELECT CITY,
	MIN(TOTALPRICE) AS MIN_TOTALPRICE,
	MAX(TOTALPRICE) AS MAX_TOTALPRICE,
	COUNT(TOTALPRICE) AS COUNT_TOTALPRICE,
	SUM(TOTALPRICE) AS SUM_TOTALPRICE,
	AVG(TOTALPRICE) AS AVG_TOTALPRICE 
FROM SALES GROUP BY CITY ORDER BY CITY

----------------------------------------------------------------------------------------------------------------------------------------

SELECT CITY,
	SUM(TOTALPRICE) AS DESC_TOTALPRICE
FROM SALES
GROUP BY CITY 
ORDER BY (SUM(TOTALPRICE)) DESC

UPDATE SALES
	SET DATE2= CONVERT(DATE,DATE_)

SELECT 
	DATE2,
	CITY,
	SUM(TOTALPRICE)
FROM SALES WHERE(DATE2='2019-01-01')
	GROUP BY DATE2,CITY 
	ORDER BY DATE2,SUM(TOTALPRICE) DESC

UPDATE SALES
	SET MONTHNAME_='12.ARALIK' WHERE (DATEPART(MONTH,DATE2)=12)

SELECT MONTHNAME_ FROM SALES

SELECT 
	MONTHNAME_,
	CITY,
	SUM(TOTALPRICE) AS TOTALPRICE 
FROM SALES
	GROUP BY CITY,MONTHNAME_ 
	ORDER BY CITY,MONTHNAME_ 


SELECT 
	MONTHNAME_,
	CITY,
	SUM(TOTALPRICE) AS TOTALPRICE 
FROM SALES WHERE(CITY='ADANA')
	GROUP BY CITY,MONTHNAME_ 
	ORDER BY CITY,MONTHNAME_ 


SELECT 
	CITY,
	MONTHNAME_,
	SUM(TOTALPRICE) AS TOTALPRICE 
FROM SALES
	GROUP BY CITY,MONTHNAME_ 
	ORDER BY MONTHNAME_ ,CITY

SELECT 
	CITY,
	MONTHNAME_,
	SUM(TOTALPRICE) AS TOTALPRICE 
FROM SALES WHERE(CITY='ADANA')
	GROUP BY CITY,MONTHNAME_ 
	ORDER BY CITY,MONTHNAME_ 

----------------------------------------------------------------------------------------------------------------------------------------
-- RANDOM DATA --
USE ETRADE2
--TRUNCATE TABLE SALES


DECLARE @I AS INT=1
DECLARE @ITEMID AS INT
DECLARE @DATE AS DATETIME
DECLARE @CUSTOMERID AS INT
DECLARE @CUSTOMERNAME AS VARCHAR(100)
DECLARE @CUSTOMERBIRTHDATE AS DATE
DECLARE @CUSTOMERGENDER AS VARCHAR(10)
DECLARE @DISTRICT AS VARCHAR(100)
DECLARE @REGION AS VARCHAR(100)
DECLARE @AMOUNT AS INT
DECLARE @ITEMCOUNT AS INT
DECLARE @CITY AS VARCHAR(100)
DECLARE @PRICEFACTOR AS FLOAT=1
DECLARE @HOUR INT
DECLARE @MINUTE INT
DECLARE @SECOND INT
DECLARE @BRANCHID AS INT
DECLARE @BRANCH AS VARCHAR(100)
DECLARE @RAND AS INT 
WHILE @I<=50000
BEGIN
SET @HOUR=RAND()*22
IF  @HOUR<8 
	SET @HOUR=8
SET @MINUTE=RAND()*60
	SET @SECOND=RAND()*60
SET @RAND=RAND()*10000
	SELECT @CITY=CITYNAME,@REGION=REGION FROM CITIES WHERE @RAND BETWEEN RANDOMBEG AND RANDOMEND

	SELECT top 1 @CUSTOMERID=ID,@CUSTOMERNAME=NAMESURNAME,@CUSTOMERBIRTHDATE=BIRTHDATE,
		@DISTRICT=TOWN,@CUSTOMERGENDER=GENDER
	FROM DBO.CUSTOMERS WHERE CITY=@CITY    ORDER BY NEWID()

	SET @ITEMCOUNT=RAND()*9
	DECLARE @K AS INT=0
	WHILE @K<=@ITEMCOUNT
	BEGIN
		SET @RAND=RAND()*365
		SET @DATE=DATEADD(DAY,@RAND,'20190101')
		SET @DATE=DATEADD(HOUR,@HOUR,@DATE)
		SET @DATE=DATEADD(MINUTE,@MINUTE,@DATE)
		SET @DATE=DATEADD(SECOND ,@SECOND,@DATE)
		SET @AMOUNT=(RAND()*10)+1
		SET @RAND=RAND()*10
	
		IF @RAND BETWEEN 0 AND 5 
			SET @PRICEFACTOR=1
		IF @RAND=6 
			SET @PRICEFACTOR=0.8
		IF @RAND=7 
			SET @PRICEFACTOR=0.9
		IF @RAND=8
			SET @PRICEFACTOR=1.1
		IF @RAND=9 
			SET @PRICEFACTOR=1.2
		IF @RAND=10 
			SET @PRICEFACTOR=1.4
		SET @RAND =RAND()*28000
 
		INSERT INTO SALES (FICHENO,DATE_,ITEMCODE,ITEMNAME,BRAND,CATEGORY1,CATEGORY2,CATEGORY3,CATEGORY4,
		AMOUNT,PRICE,TOTALPRICE,CUSTOMERCODE,CUSTOMERNAME,CUSTOMERBIRHTDATE,CUSTOMERGENDER,
		BRANCH,CITY,DISTRICT,REGION)
		SELECT TOP 1 
		REPLICATE('0',10-LEN(@I))+CONVERT(VARCHAR,@I),@DATE,ITEMCODE,ITEMNAME,BRAND,CATEGORY1,CATEGORY2,CATEGORY3,CATEGORY4,
		@AMOUNT,SALEPRICE,@AMOUNT*SALEPRICE*@PRICEFACTOR,@CUSTOMERID,@CUSTOMERNAME,@CUSTOMERBIRTHDATE,@CUSTOMERGENDER,
		@CITY,@CITY,@DISTRICT,@REGION
		FROM ITEMS WHERE SALEPRICE>0.1 AND ID>=@RAND ORDER BY ID 

SET @K=@K+1
END
 
SET @I=@I+1
END

 


----------------------------------------------------------------------------------------------------------------------------------------
-- RANDOM DATA --

--TRUNCATE TABLE ORDERS
--TRUNCATE TABLE ORDERDETAILS
--TRUNCATE TABLE INVOICES
--TRUNCATE TABLE INVOICEDETAILS
--TRUNCATE TABLE PAYMENTS
 

DECLARE @I AS INT=0
DECLARE @ITEMCOUNT AS INT
DECLARE @ADDRESSID AS INT 
DECLARE @ORDERID AS INT
DECLARE @ITEMID AS INT
DECLARE @USERID AS INT
DECLARE @DATE AS DATETIME
DECLARE @TOTALPRICE AS FLOAT
DECLARE @PRICE AS FLOAT
DECLARE @AMOUNT AS INT
DECLARE @INVOICEID AS INT

WHILE @I<10000
BEGIN
SELECT TOP 1  @USERID=ID FROM ETRADE4.DBO.USERS ORDER BY NEWID()
SELECT TOP 1 @ADDRESSID=ID FROM ADDRESS WHERE USERID=@USERID  ORDER BY NEWID()
WHILE @ADDRESSID IS NULL
BEGIN
	SELECT TOP 1  @USERID=ID FROM ETRADE4.DBO.USERS ORDER BY NEWID()
	SELECT TOP 1 @ADDRESSID=ID FROM ADDRESS WHERE USERID=@USERID  ORDER BY NEWID()
END

SET @DATE=DATEADD(DAY,RAND()*450,'20190101')
SET @DATE=DATEADD(HOUR,RAND()*24,@DATE) 
SET @DATE=DATEADD(MINUTE,RAND()*60,@DATE) 
SET @DATE=DATEADD(SECOND,RAND()*60,@DATE) 
SET @ITEMCOUNT=1+(RAND()*10)
DECLARE @K AS INT=0
INSERT INTO ORDERS(USERID,DATE_,TOTALPRICE,STATUS_,ADDRESSID)
	VALUES (@USERID,@DATE,0,0,@ADDRESSID)
SET @ORDERID=@@IDENTITY

WHILE @K<@ITEMCOUNT
BEGIN
	SELECT TOP 1  @ITEMID=ID,@PRICE=UNITPRICE*(1+(RAND()*0.2)),@AMOUNT=1+(RAND()*10) FROM ITEMS WHERE UNITPRICE>0 ORDER BY NEWID()
	INSERT INTO ORDERDETAILS (ORDERID,ITEMID,AMOUNT,UNITPRICE,LINETOTAL)
	VALUES(@ORDERID,@ITEMID,@AMOUNT,@PRICE,@PRICE*@AMOUNT)
	
---------------------------------------------------------------------------------
-- PROCEDURE --
CREATE PROCEDURE BOL
AS
DECLARE 
	@SAYI1 FLOAT = 20,
	@SAYI2 FLOAT = 38.8,
	@SONUC FLOAT,
	@ISLEM CHAR ='/'

IF @ISLEM = '/'
	BEGIN
	SET @SONUC = @SAYI1 @ISLEM @SAYI2
	SELECT @SONUC
	END
GO

EXEC BOL
---------------------------------------------------------------------------------
SET @K=@K+1
END --@K
--UPDATE ORDERS SET TOTALPRICE=ROUND((SELECT SUM(LINETOTAL) FROM ORDERDETAILS WHERE ORDERID=@ORDERID),2)
--WHERE ID=@ORDERID

INSERT INTO PAYMENTS
(ORDERID,PAYMENTTYPE,DATE_,ISOK,APPROVECODE,PAYMENTTOTAL)

SELECT ID,1+(RAND()*2),DATEADD(SECOND,2,@DATE),1,'APPRV'+REPLICATE('0',10-LEN(@ORDERID))+CONVERT(VARCHAR,@ORDERID),TOTALPRICE
FROM ORDERS WHERE ID=@ORDERID

--UPDATE ORDERS SET STATUS_=1 WHERE ID=@ORDERID

	INSERT INTO INVOICES(ORDERID,DATE_,ADDRESSID,CARGOFICHENO,TOTALPRICE)
	SELECT   ID,DATEADD(MINUTE,RAND()*60,DATEADD(HOUR,10+(RAND()*24),@DATE)) AS DATE_,
	ADDRESSID,'CRGF'+REPLICATE('0',10-LEN(@ORDERID))+CONVERT(VARCHAR,@ORDERID) AS CARGOFICHENO,TOTALPRICE
	 FROM ORDERS WHERE ID=@ORDERID
 SET @INVOICEID=@@IDENTITY
	 INSERT INTO INVOICEDETAILS
	 (INVOICEID,ORDERDETAILID,ITEMID,AMOUNT,UNITPRICE,LINETOTAL)
	 SELECT @INVOICEID,ID,ITEMID,AMOUNT,UNITPRICE,LINETOTAL
	 FROM ORDERDETAILS WHERE ORDERID=@ORDERID

--UPDATE ORDERS SET STATUS_=2 WHERE ID=@ORDERID
SET @I=@I+1
END-- @I
SELECT * FROM ORDERS
SELECT * FROM ORDERDETAILS
SELECT * FROM PAYMENTS
SELECT * FROM INVOICES
SELECT * FROM INVOICEDETAILS



----------------------------------------------------------------------------------------------------------------------------------------
SELECT 
	CATEGORY1,
	CATEGORY2,
	CATEGORY3,
	CATEGORY4, 
	SUM(TOTALPRICE) AS TOTALPRICE,
	COUNT(*) AS ROWCOUNT_,
	SUM(AMOUNT) AS TOTALAMAOUNT
FROM SALES 
	GROUP BY 
		CATEGORY1,
		CATEGORY2,
		CATEGORY3,
		CATEGORY4 
	ORDER BY 
		CATEGORY1,
		CATEGORY2,
		CATEGORY3,
		CATEGORY4

SELECT 
	FICHENO,
	COUNT(*) AS COUNT_,
	CITY AS CITY_
FROM SALES 
	WHERE (MONTHNAME_='01.OCAK' AND CITY='ADANA')
	GROUP BY FICHENO,CITY


SELECT 
	FICHENO,
	COUNT(*) AS COUNT_,
	CITY AS CITY_
FROM SALES 
	WHERE (MONTHNAME_='01.OCAK')
	GROUP BY FICHENO,CITY
	ORDER BY CITY

SELECT 
	CITY AS SEHIR,
	COUNT(DISTINCT FICHENO) AS OCAK_AYI_SATIS,
	COUNT(*) AS TOPLAM_FATURA
	
FROM SALES 
	WHERE (MONTHNAME_='01.OCAK')
	GROUP BY CITY
	ORDER BY CITY


SELECT 
	CITY,
	SUM(TOTALPRICE) 
FROM SALES 
	GROUP BY CITY 
	HAVING SUM(TOTALPRICE)<40000
	ORDER BY SUM(TOTALPRICE) DESC


SELECT  COUNT(CITY) - COUNT(DISTINCT CITY)  FROM STATION 


SELECT * FROM USERS
-- ID İLE ADRESLERİ ÇEKME -- 
SELECT USERS.*,ADDRESS_.ADDRESSTEXT FROM 
USERS,ADDRESS_ WHERE USERS.ID=ADDRESS_.USERID AND USERS.ID=4

SELECT 
	U.NAMESURNAME, U.EMAIL,U.GENDER,U.BIRTHDATE
	,A.ADDRESSTEXT
	FROM USERS AS U,ADDRESS_ AS A
WHERE (U.ID=A.USERID AND U.ID=4)

SELECT 
	U.NAMESURNAME, U.EMAIL,U.GENDER,U.BIRTHDATE
	,A.ADDRESSTEXT
	,A.POSTALCODE
	,C.COUNTRY
	,CT.CITY
	,T.TOWN
	,D.DISTRICT
	FROM USERS AS U,ADDRESS_ AS A, COUNTRIES C,CITIES CT,TOWNS T,DISTRICTS D
WHERE (U.ID=A.USERID AND C.ID=A.COUNTRYID AND CT.ID=A.CITYID AND T.ID=A.TOWNID AND  D.ID=A.DISTRICTID AND U.ID=4 )


SELECT 
	U.NAMESURNAME, U.EMAIL,U.GENDER,U.BIRTHDATE
	,A.ADDRESSTEXT
	,A.POSTALCODE
	,C.COUNTRY
	,CT.CITY
	,T.TOWN
	,D.DISTRICT
	FROM USERS AS U,ADDRESS_ AS A, COUNTRIES C,CITIES CT,TOWNS T,DISTRICTS D
WHERE (U.ID=A.USERID AND C.ID=A.COUNTRYID AND CT.ID=A.CITYID AND T.ID=A.TOWNID AND  D.ID=A.DISTRICTID )
ORDER BY NAMESURNAME



SELECT 
	U.NAMESURNAME, U.EMAIL,U.GENDER,U.BIRTHDATE
	,A.ADDRESSTEXT
	,A.POSTALCODE
	,C.COUNTRY
	,CT.CITY
	,T.TOWN
	,D.DISTRICT
	FROM USERS AS U,ADDRESS_ AS A, COUNTRIES C,CITIES CT,TOWNS T,DISTRICTS D
WHERE (
	U.ID=A.USERID AND 
	C.ID=A.COUNTRYID AND 
	CT.ID=A.CITYID AND 
	T.ID=A.TOWNID AND  
	D.ID=A.DISTRICTID AND
	CT.CITY LIKE 'BURSA'
						)
ORDER BY NAMESURNAME



SELECT 
	COUNT(DISTINCT U.ID)
FROM USERS AS U,ADDRESS_ AS A, COUNTRIES C,CITIES CT,TOWNS T,DISTRICTS D
	WHERE (
		U.ID=A.USERID AND 
		C.ID=A.COUNTRYID AND 
		CT.ID=A.CITYID AND 
		T.ID=A.TOWNID AND  
		D.ID=A.DISTRICTID)
	

SELECT 
	U.ID
FROM USERS AS U,ADDRESS_ AS A, COUNTRIES C,CITIES CT,TOWNS T,DISTRICTS D
	WHERE (
		U.ID=A.USERID AND 
		C.ID=A.COUNTRYID AND 
		CT.ID=A.CITYID AND 
		T.ID=A.TOWNID AND  
		D.ID=A.DISTRICTID)
	GROUP BY U.ID

SELECT 
	U.NAMESURNAME, COUNT(A.ID) AS ADDRESS_COUNT
FROM USERS AS U,ADDRESS_ AS A, COUNTRIES C,CITIES CT,TOWNS T,DISTRICTS D
	WHERE (
		U.ID=A.USERID AND 
		C.ID=A.COUNTRYID AND 
		CT.ID=A.CITYID AND 
		T.ID=A.TOWNID AND  
		D.ID=A.DISTRICTID)
	GROUP BY U.NAMESURNAME


SELECT 
	U.NAMESURNAME, COUNT(DISTINCT C.COUNTRY) AS COUNTRY_COUNT
FROM USERS AS U,ADDRESS_ AS A, COUNTRIES C,CITIES CT,TOWNS T,DISTRICTS D
	WHERE (
		U.ID=A.USERID AND 
		C.ID=A.COUNTRYID AND 
		CT.ID=A.CITYID AND 
		T.ID=A.TOWNID AND  
		D.ID=A.DISTRICTID)
	GROUP BY U.NAMESURNAME

SELECT 
	U.NAMESURNAME, COUNT(DISTINCT CT.ID) AS CITY_COUNT
FROM USERS AS U,ADDRESS_ AS A, COUNTRIES C,CITIES CT,TOWNS T,DISTRICTS D
	WHERE (
		U.ID=A.USERID AND 
		C.ID=A.COUNTRYID AND 
		CT.ID=A.CITYID AND 
		T.ID=A.TOWNID AND  
		D.ID=A.DISTRICTID)
	GROUP BY U.NAMESURNAME


SELECT 
	U.NAMESURNAME, COUNT(DISTINCT CT.ID) AS CITY_COUNT
FROM USERS AS U,ADDRESS_ AS A, COUNTRIES C,CITIES CT,TOWNS T,DISTRICTS D
	WHERE (
		U.ID=A.USERID AND 
		C.ID=A.COUNTRYID AND 
		CT.ID=A.CITYID AND 
		T.ID=A.TOWNID AND  
		D.ID=A.DISTRICTID)
	GROUP BY U.NAMESURNAME
	HAVING COUNT(A.ID)>2


SELECT 
	CT.CITY
FROM USERS AS U,ADDRESS_ AS A, COUNTRIES C,CITIES CT,TOWNS T,DISTRICTS D
	WHERE (
		U.ID=A.USERID AND 
		C.ID=A.COUNTRYID AND 
		CT.ID=A.CITYID AND 
		T.ID=A.TOWNID AND  
		D.ID=A.DISTRICTID)
	GROUP BY CT.CITY



SELECT 
	CT.CITY,COUNT(U.ID) AS USER_COUNT
FROM USERS AS U,ADDRESS_ AS A, COUNTRIES C,CITIES CT,TOWNS T,DISTRICTS D
	WHERE (
		U.ID=A.USERID AND 
		C.ID=A.COUNTRYID AND 
		CT.ID=A.CITYID AND 
		T.ID=A.TOWNID AND  
		D.ID=A.DISTRICTID)
	GROUP BY CT.CITY



SELECT 
	CT.CITY,COUNT(U.ID) AS USER_COUNT,COUNT(DISTINCT D.DISTRICT) AS DISTRICT_COUNT
FROM USERS AS U,ADDRESS_ AS A, COUNTRIES C,CITIES CT,TOWNS T,DISTRICTS D
	WHERE (
		U.ID=A.USERID AND 
		C.ID=A.COUNTRYID AND 
		CT.ID=A.CITYID AND 
		T.ID=A.TOWNID AND  
		D.ID=A.DISTRICTID)
	GROUP BY CT.CITY
----------------------------------------------------------------------------------------------------------------------------------------


SELECT U.NAMESURNAME,A.ADDRESSTEXT,C.COUNTRY,CT.CITY,T.TOWN,D.DISTRICT
	FROM USERS U
	JOIN ADDRESS_ A ON A.USERID = U.ID
	JOIN COUNTRIES C ON C.ID=A.COUNTRYID
	JOIN CITIES CT ON CT.ID=A.CITYID
	JOIN TOWNS T ON T.ID=A.TOWNID
	JOIN DISTRICTS D ON D.ID = A.DISTRICTID

SELECT

FROM USERS U LEFT JOIN ADDRESS_ A ON U.ID=A.USERID
------------------------------------------------------------------------------------
 SELECT 
	U.USERNAME_ AS USERNAME,
	U.NAMESURNAME AS NAME_SURNAME,
	CT.CITY AS CITY,
	T.TOWN AS TOWN,
	D.DISTRICT AS DISTRICT,
	A.ADDRESSTEXT AS ADRESS_,
	O.ID AS ORDERID,
	O.DATE_ AS ORDERDATE_,
	O.TOTALPRICE AS TOTALPRICE,
	P.DATE_ AS PAYMENT_DATE,
	P.APPROVECODE AS APPROVECODE,
	I.DATE_ AS FICHE_DATE,
	I.CARGOFICHENO AS CARGO_FICHENO
 FROM (ORDERS O 
	INNER JOIN USERS U ON U.ID=O.USERID
	INNER JOIN ADDRESS A ON A.ID=O.ADDRESSID
	INNER JOIN CITIES CT ON CT.ID=A.CITYID
	INNER JOIN TOWNS T ON T.ID=A.TOWNID
	INNER JOIN DISTRICTS D ON D.ID=A.DISTRICTID
	INNER JOIN PAYMENTS P ON P.ORDERID=O.ID
	INNER JOIN INVOICES I ON I.ORDERID=O.ID)



 
SELECT 
	U.USERNAME_ AS USERNAME,
	U.NAMESURNAME AS NAME_SURNAME,
	CT.CITY AS CITY,
	T.TOWN AS TOWN,
	D.DISTRICT AS DISTRICT,
	A.ADDRESSTEXT AS ADRESS_,
	O.ID AS ORDERID,
	O.DATE_ AS ORDERDATE_,
	O.TOTALPRICE AS TOTALPRICE,
	P.DATE_ AS PAYMENT_DATE,
	P.APPROVECODE AS APPROVECODE,
	I.DATE_ AS FICHE_DATE,
	I.CARGOFICHENO AS CARGO_FICHENO
 FROM (ORDERS O 
	INNER JOIN USERS U ON U.ID=O.USERID
	INNER JOIN ADDRESS A ON A.ID=O.ADDRESSID
	INNER JOIN CITIES CT ON CT.ID=A.CITYID
	INNER JOIN TOWNS T ON T.ID=A.TOWNID
	INNER JOIN DISTRICTS D ON D.ID=A.DISTRICTID
	INNER JOIN PAYMENTS P ON P.ORDERID=O.ID
	INNER JOIN INVOICES I ON I.ORDERID=O.ID)
WHERE (U.USERNAME_='A_TOLU')


 SELECT 
	U.USERNAME_ AS USERNAME,
	U.NAMESURNAME AS NAME_SURNAME,
	CT.CITY AS CITY,
	T.TOWN AS TOWN,
	D.DISTRICT AS DISTRICT,
	A.ADDRESSTEXT AS ADRESS_,
	O.ID AS ORDERID,
	O.DATE_ AS ORDERDATE_,
	O.TOTALPRICE AS TOTALPRICE,
	P.DATE_ AS PAYMENT_DATE,
	P.APPROVECODE AS APPROVECODE,
	I.DATE_ AS FICHE_DATE,
	I.CARGOFICHENO AS CARGO_FICHENO,
	ITM.ITEMCODE AS ITEMCODE,
	ITM.ITEMNAME AS ITEMNAME,
	OD.AMOUNT AS AMOUNT,
	OD.UNITPRICE AS UNITPRICE,
	OD.LINETOTAL AS LINE_TOTAL
 FROM (ORDERS O 
	INNER JOIN USERS U ON U.ID=O.USERID
	INNER JOIN ADDRESS A ON A.ID=O.ADDRESSID
	INNER JOIN CITIES CT ON CT.ID=A.CITYID
	INNER JOIN TOWNS T ON T.ID=A.TOWNID
	INNER JOIN DISTRICTS D ON D.ID=A.DISTRICTID
	INNER JOIN PAYMENTS P ON P.ORDERID=O.ID
	INNER JOIN INVOICES I ON I.ORDERID=O.ID)
	INNER JOIN ORDERDETAILS OD ON OD.ORDERID=O.ID
	INNER JOIN ITEMS ITM ON ITM.ID=OD.ITEMID
WHERE (U.USERNAME_='C_SANDIKCI')
--(O.ID=13119)


SELECT 
	CT.CITY AS CITY_NAME,
	SUM(OD.LINETOTAL) AS SUM_TOTALPRICE,
	SUM(OD.AMOUNT) AS SUM_AMOUNT,
	COUNT(OD.ID) TOTAL_ORDER
FROM (ORDERS O 
	INNER JOIN ADDRESS A ON A.ID=O.ADDRESSID
	INNER JOIN CITIES CT ON CT.ID=A.CITYID
	INNER JOIN ORDERDETAILS OD ON OD.ORDERID=O.ID)
GROUP BY CT.CITY
ORDER BY CT.CITY


SELECT 
	CT.CITY AS CITY_NAME,
	SUM(OD.LINETOTAL) AS SUM_TOTALPRICE,
	SUM(OD.AMOUNT) AS SUM_AMOUNT,
	COUNT(OD.ID) TOTAL_ORDER
FROM (ORDERS O 
	INNER JOIN ADDRESS A ON A.ID=O.ADDRESSID
	INNER JOIN CITIES CT ON CT.ID=A.CITYID
	INNER JOIN ORDERDETAILS OD ON OD.ORDERID=O.ID)
GROUP BY CT.CITY
ORDER BY SUM(OD.LINETOTAL) DESC


SELECT 
	ITM.CATEGORY1 AS CATEGORY_1,
	ITM.CATEGORY2 AS CATEGORY_2,
	SUM(OD.LINETOTAL) AS SUM_TOTALPRICE,
	SUM(OD.AMOUNT) AS SUM_AMOUNT,
	COUNT(OD.ID) TOTAL_ORDER
FROM (ORDERS O 
	INNER JOIN ORDERDETAILS OD ON OD.ORDERID=O.ID
	INNER JOIN ITEMS ITM ON ITM.ID=OD.ITEMID)
WHERE ITM.CATEGORY1='EV'
GROUP BY ITM.CATEGORY1,ITM.CATEGORY2
ORDER BY 3 DESC



SELECT 
	CONVERT(DATE,O.DATE_) AS DATE_,
	SUM(OD.LINETOTAL) AS TOTALORDER_PRICE,
	SUM(OD.AMOUNT) AS TOTALORDER_AMOUNT,
	COUNT(OD.ID) AS TOTALORDER_AMOUNT

FROM (ORDERS O 
	INNER JOIN ORDERDETAILS OD ON OD.ORDERID=O.ID)
GROUP BY CONVERT(DATE,O.DATE_)
ORDER BY CONVERT(DATE,O.DATE_)



SELECT 
	DATEPART(YEAR,O.DATE_) AS YEAR_,
	DATEPART(MONTH,O.DATE_) AS MONTH_,
	CASE
		WHEN DATEPART(MONTH,O.DATE_)=1 THEN 'January'
		WHEN DATEPART(MONTH,O.DATE_)=2 THEN 'February'
		WHEN DATEPART(MONTH,O.DATE_)=3 THEN 'March'
		WHEN DATEPART(MONTH,O.DATE_)=4 THEN 'April'
		WHEN DATEPART(MONTH,O.DATE_)=5 THEN 'May'
		WHEN DATEPART(MONTH,O.DATE_)=6 THEN 'June'
		WHEN DATEPART(MONTH,O.DATE_)=7 THEN 'July'
		WHEN DATEPART(MONTH,O.DATE_)=8 THEN 'August '
		WHEN DATEPART(MONTH,O.DATE_)=9 THEN 'September'
		WHEN DATEPART(MONTH,O.DATE_)=10 THEN 'October'
		WHEN DATEPART(MONTH,O.DATE_)=11 THEN 'November'
		WHEN DATEPART(MONTH,O.DATE_)=12 THEN 'December'
	END AS MONTH_NAME,	
	SUM(OD.LINETOTAL) AS TOTALORDER_PRICE,
	SUM(OD.AMOUNT) AS TOTALORDER_AMOUNT,
	COUNT(OD.ID) AS TOTALORDER_AMOUNT

FROM (ORDERS O 
	INNER JOIN ORDERDETAILS OD ON OD.ORDERID=O.ID)

GROUP BY DATEPART(MONTH,O.DATE_),DATEPART(YEAR,O.DATE_)
ORDER BY DATEPART(MONTH,O.DATE_),DATEPART(YEAR,O.DATE_)





SELECT 
	DATEPART(YEAR,DATE_) AS YEAR_,
	DATEPART(MONTH,DATE_) AS MONTH_,
	CASE
		WHEN (PAYMENTTYPE)=1 THEN 'CREDIT CARD'
		WHEN (PAYMENTTYPE)=2 THEN 'BANK TRANSFER'
	END AS PAYMENT_TYPE_DESCRIPTION,
	SUM(PAYMENTTOTAL) AS SUM_PAYMENT
FROM PAYMENTS
GROUP BY DATEPART(MONTH,DATE_),PAYMENTTYPE,DATEPART(YEAR,DATE_)
ORDER BY DATEPART(YEAR,DATE_),DATEPART(MONTH,DATE_)




SELECT 
	MIN(DATEDIFF(HOUR,O.DATE_,I.DATE_)) AS EN_KISA_TESLIMAT_SAAT,
	MAX(DATEDIFF(HOUR,O.DATE_,I.DATE_)) AS EN_UZUN_TESLIMAT_SAAT,
	AVG(DATEDIFF(HOUR,O.DATE_,I.DATE_)) AS TESLIMAT_SURESI_ORT_SAAT
FROM ORDERS O 

	INNER JOIN INVOICES I ON I.ORDERID=O.ID


SELECT 
	U.ID AS USERID,
	U.NAMESURNAME AS USER_NS,
	AVG(DATEDIFF(HOUR,O.DATE_,I.DATE_)) AS ORTALAMA_TESLIMAT_SURESI
FROM ORDERS O 
	INNER JOIN USERS U ON U.ID=O.USERID
	INNER JOIN INVOICES I ON I.ORDERID=O.ID
	GROUP BY U.ID,U.NAMESURNAME
	HAVING AVG(DATEDIFF(HOUR,O.DATE_,I.DATE_))>23
	ORDER BY 3 DESC




SELECT 
	U.ID AS USERID,
	U.NAMESURNAME AS USER_NS,
	AVG(DATEDIFF(HOUR,O.DATE_,I.DATE_)) AS ORTALAMA_TESLIMAT_SURESI,
	MIN(DATEDIFF(HOUR,O.DATE_,I.DATE_)) AS MIN_TESLIMAT_SURESI,
	MAX(DATEDIFF(HOUR,O.DATE_,I.DATE_)) AS MAX_TESLIMAT_SURESI,
	SUM(O.TOTALPRICE) AS TOPLAM_SIPARIS_TUTARI,
	COUNT(O.ID) AS SIPARIS_SAYISI
FROM ORDERS O 
	INNER JOIN USERS U ON U.ID=O.USERID
	INNER JOIN INVOICES I ON I.ORDERID=O.ID
	GROUP BY U.ID,U.NAMESURNAME
	HAVING AVG(DATEDIFF(HOUR,O.DATE_,I.DATE_))>23
	ORDER BY 6 DESC 


SELECT 
	DATEPART(YEAR,O.DATE_) AS YIL,
	DATEPART(MONTH,O.DATE_) AS AY,
	AVG(DATEDIFF(HOUR,O.DATE_,I.DATE_)) AS ORTALAMA_TESLIMAT_SURESI,
	MIN(DATEDIFF(HOUR,O.DATE_,I.DATE_)) AS MIN_TESLIMAT_SURESI,
	MAX(DATEDIFF(HOUR,O.DATE_,I.DATE_)) AS MAX_TESLIMAT_SURESI,
	SUM(O.TOTALPRICE) AS TOPLAM_SIPARIS_TUTARI,
	COUNT(O.ID) AS SIPARIS_SAYISI
FROM ORDERS O 
	INNER JOIN INVOICES I ON I.ORDERID=O.ID
	GROUP BY DATEPART(YEAR,O.DATE_),DATEPART(MONTH,O.DATE_)
	ORDER BY 1,2
	



SELECT 
	CT.CITY AS SEHIR,
	AVG(DATEDIFF(HOUR,O.DATE_,I.DATE_)) AS ORTALAMA_TESLIMAT_SURESI,
	MIN(DATEDIFF(HOUR,O.DATE_,I.DATE_)) AS MIN_TESLIMAT_SURESI,
	MAX(DATEDIFF(HOUR,O.DATE_,I.DATE_)) AS MAX_TESLIMAT_SURESI,
	SUM(O.TOTALPRICE) AS TOPLAM_SIPARIS_TUTARI,
	COUNT(O.ID) AS SIPARIS_SAYISI
FROM ORDERS O 
	INNER JOIN ADDRESS A ON A.ID=O.ADDRESSID
	INNER JOIN CITIES CT ON CT.ID=A.CITYID
	INNER JOIN INVOICES I ON I.ORDERID=O.ID
	GROUP BY CT.CITY
	ORDER BY 2 DESC


--------------------------------------------------------------------------

-- SUBQUERY --

SELECT
	ITM.ITEMCODE AS ITEM_CODE,
	ITM.ITEMNAME AS ITEM_NAME,
	(SELECT MIN(UNITPRICE) 
		FROM ORDERDETAILS 
		WHERE ITEMID=ITM.ID) AS MIN_PRICE,

	(SELECT MAX(UNITPRICE) 
		FROM ORDERDETAILS 
		WHERE ITEMID=ITM.ID) AS MAX_PRICE,

	(SELECT AVG(UNITPRICE) 
		FROM ORDERDETAILS 
		WHERE ITEMID=ITM.ID) AS AVG_PRICE,
	(SELECT SUM(AMOUNT) 
		FROM ORDERDETAILS 
		WHERE ITEMID=ITM.ID) AS SUM_AMOUNT,
	(SELECT SUM(LINETOTAL) 
		FROM ORDERDETAILS 
		WHERE ITEMID=ITM.ID) AS SUM_LINETOTAL
FROM 
	ITEMS ITM
ORDER BY 
	ITM.ITEMNAME





